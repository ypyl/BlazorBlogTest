<hr><br /><p>layout: post<br />title: "Linq and Group"<br />date: 2010-10-16</p><br /><h2 id="tags-dotnet-categories-programming">tags: dotnet<br />categories: programming</h2><br /><p>Description. There are modules that have the input and output parameters (type and number of parameters may be different). The goal is to select some first modules that have no input parameters, then the modules whose inputs are the output parameters of the previously selected modules and so on. Until the last module will not output parameters.</p><br /><p>The database stores all displayed modules and displays of all parameters where the parameter mapping to the mapping of modules is many-to-one.<br />Initially, we choose to do all the settings using a simple SQL query.</p><br /><div style="color:#DADADA;background-color:#1E1E1E;"><pre><span style="color:#569CD6;">private</span> <span style="color:#569CD6;">static</span> SqlCeDataReader SelectAllParamterAndModuleName()<br />{<br />    <span style="color:#569CD6;">return</span> ExecuteDataReader(String.Format(QSelectAllParamterANdModuleName));<br />}<br /></pre></div><br /><p>where QSelectAllParamterANdModuleName is text of the query.</p><br /><div style="color:#DADADA;background-color:#1E1E1E;"><pre><span style="color:#569CD6;">private</span> <span style="color:#569CD6;">static</span> IEnumerable&lt;ParameterType&gt; SelectAllParameterToArray()<br />{<br />    <span style="color:#569CD6;">var</span> query =<br />        <span style="color:#569CD6;">from</span> row <span style="color:#569CD6;">in</span> SelectAllParamterAndModuleName().Cast()<br />        <span style="color:#569CD6;">select</span> <span style="color:#569CD6;">new</span> ParameterType<br />        {<br />            Id = (<span style="color:#569CD6;">int</span>)row[<span style="color:#D69D85;">"FID"</span>],<br />            Name = (<span style="color:#569CD6;">string</span>)row[<span style="color:#D69D85;">"FNAME"</span>],<br />            TypeName = (<span style="color:#569CD6;">string</span>)row[<span style="color:#D69D85;">"FTYPE"</span>],<br />            ModuleId = (<span style="color:#569CD6;">int</span>)row[<span style="color:#D69D85;">"FMODULEID"</span>],<br />                        ModuleName = (<span style="color:#569CD6;">string</span>)row[<span style="color:#D69D85;">"FMODULE"</span>], Number = (<span style="color:#569CD6;">int</span>)row[<span style="color:#D69D85;">"FNUMBER"</span>], TypeOfPar = (<span style="color:#569CD6;">bool</span>)row[<span style="color:#D69D85;">"FTYPEOFPARAMETER"</span>]};<br />    <span style="color:#569CD6;">return</span> query.ToArray();<br />}<br /></pre></div><br /><p>create from selected SqlReader array of elements of ParameterType. The result can be cached.</p><br /><div style="color:#DADADA;background-color:#1E1E1E;"><pre><span style="color:#569CD6;">public</span> <span style="color:#569CD6;">static</span> List&lt;ModuleType&gt; SelectModuleByInputParameter(List&lt;ParameterType&gt; inputParameter)<br />{<br />    <span style="color:#569CD6;">if</span> (inputParameter == <span style="color:#569CD6;">null</span>)<br />    {<br />        <span style="color:#569CD6;">throw</span> <span style="color:#569CD6;">new</span> ArgumentNullException();<br />    }<br />    <span style="color:#569CD6;">var</span> res = <span style="color:#569CD6;">new</span> List();<br />    <span style="color:#569CD6;">var</span> para = SelectAllParameterToArray();<br />    <span style="color:#569CD6;">if</span> (inputParameter.Count == <span style="color:#B5CEA8;">0</span>)<br />    {<br />        <span style="color:#569CD6;">var</span> par = <span style="color:#569CD6;">from</span> parameter <span style="color:#569CD6;">in</span> para<br />                    <span style="color:#569CD6;">where</span> !(<span style="color:#569CD6;">from</span> parameter2 <span style="color:#569CD6;">in</span> para<br />                            <span style="color:#569CD6;">where</span> parameter2.TypeOfPar<br />                            <span style="color:#569CD6;">select</span> parameter2.ModuleId).Contains(parameter.ModuleId)<br />                    <span style="color:#569CD6;">select</span> parameter;<br />        <span style="color:#569CD6;">return</span> par.Select(x =&amp;gt; <span style="color:#569CD6;">new</span> ModuleType {Id = x.ModuleId, Name = x.ModuleName}).ToList();<br />    }<br /><br />    <span style="color:#569CD6;">var</span> parGr = <span style="color:#569CD6;">from</span> parameter <span style="color:#569CD6;">in</span> para<br />                <span style="color:#569CD6;">where</span> parameter.TypeOfPar<br />                <span style="color:#569CD6;">group</span> parameter <span style="color:#569CD6;">by</span> parameter.ModuleId<br />                <span style="color:#569CD6;">into</span> modPara<br />                <span style="color:#569CD6;">where</span> modPara.Count() == inputParameter.Count<br />                <span style="color:#569CD6;">select</span> modPara;<br /><br />    <span style="color:#569CD6;">foreach</span> (<span style="color:#569CD6;">var</span> paramGr <span style="color:#569CD6;">in</span> parGr)<br />    {<br />        <span style="color:#569CD6;">bool</span> AddInRes = <span style="color:#569CD6;">true</span>;<br />        <span style="color:#569CD6;">var</span> listParaGr = paramGr.ToList();<br />        <span style="color:#569CD6;">for</span> (<span style="color:#569CD6;">int</span> i = <span style="color:#B5CEA8;">0</span>; i &amp;lt; listParaGr.Count; i++)<br />        {<br />            <span style="color:#569CD6;">if</span> (listParaGr[i].Number != inputParameter[i].Number ||<br />            listParaGr[i].TypeName != inputParameter[i].TypeName)<br />                AddInRes = <span style="color:#569CD6;">false</span>;<br />        }<br />        <span style="color:#569CD6;">if</span> (AddInRes)<br />        {<br />            res.Add(<span style="color:#569CD6;">new</span> ModuleType(){Id =  listParaGr[<span style="color:#B5CEA8;">0</span>].ModuleId, Name = listParaGr[<span style="color:#B5CEA8;">0</span>].ModuleName});<br />        }<br />    }<br />    <span style="color:#569CD6;">return</span> res;<br />}<br /></pre></div><br /><p>This method returns a collection of our modules, which contains defined input parameters. Thus, this method should be called justbefore the loop until the result will contain at least one value. It should be noted that calls to this method will generally be bifurcate (the first layer selected modules, and for everyone in this layer, called again, this method and so on). But this is not Linq.</p><br />